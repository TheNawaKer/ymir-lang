{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ymir",
	"patterns": [			
		{
			"include": "#begin-directive"
		},	
		{
			"include": "#struct-content"
		},	
		{
			"include": "#enum-content"
		},	
		{
			"include": "#struct-name"
		},
		{
			"include": "#lambda"
		},
		{
			"include": "#other-keywords"
		},	
		{
			"include": "#keywords"
		},	
		{
			"include": "#self-statement"
		},	
		{
			"include": "#def-statement"
		},	
		{
			"include": "#let-statement"
		},	
		{
			"include": "#impl-statement"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#type-builtin"
		},
		{
			"include": "#template-name"
		},
		{
			"include": "#type-left"
		},
		{
			"include": "#self"
		},
		{
			"include": "#literal"
		}
	],
	"repository": {
		"begin-directive": {
			"patterns": [{
				"match": "\\b(mod|import)\\s+([a-z0-9A-Z:]*)\\s*",
				"captures": {
					"1": {
						"name": "keyword.other.using.ymir"
					},
					"2":{
						"patterns": [
							{
								"include": "#type-name"
							}
						]
					}
				}			
			}]
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.ymir",
				"match": "\\b(if|while|for|return|loop|match|extern)\\b"
			}]
		},
		"other-keywords": {
			"patterns": [{
				"name": "keyword.other.var.ymir",
				"match": "\\b(alias|mut|dmut|ref|copy|dcopy|true|false|struct|enum|sizeof|typeof)|@packed|@union"				
			}]
		}
		,
		"lambda": {
			"patterns": [{
				"name": "keyword.other.var.ymir",
				"match": "(->|=>)"
			}]
		},
		"self": {
			"patterns": [{
				"name": "keyword.other.this.ymir",
				"match": "\\b(self)\\b"
			}]
		},
		"let-statement": {
			"patterns": [						
				{
					"match": "\\b(.+?(?=def))|(?!(mut))(\\b((\\b((var|pub|let|with|mut|imut)\\s)+|new|init|typeid)+)+?([a-z0-9A-Z_]+)?({)?)",
					"captures": {
						"1": {
							"name": "keyword.other.var.ymir"
						},
						"4": {
							"name": "keyword.other.var.ymir"
						},
						"8":{
							"name": "entity.name.variable.field.ymir"
						},
						"9": {
							"name": "punctuation.separator.coloncolon.ymir"
						}
					}
				}				
				,{
					"match": "\\b(class)\\s+(@abstract\\s+)?([a-z0-9A-Z:]+)\\s*((over)\\s+([a-z0-9A-Z:]+))?",
					"captures": {
						"1": {
							"name": "keyword.other.var.ymir"
						},
						"2": {
							"name": "keyword.other.var.ymir"
						},
						"3":{
							"patterns": [
								{
									"include": "#type-name"
								}
							]
						},
						"5": {
							"name": "keyword.other.var.ymir"
						},
						"6":{
							"patterns": [
								{
									"include": "#type-name"
								}
							]
						}
					}
				}		
			]
		},
		"self-statement":{
			"match": "(\\bself\\s*)+(\\(([\\s\\S]*)\\))",
			"captures": {
				"1": {
					"name": "keyword.other.var.ymir"
				},
				"3":{
					"patterns": [
						{
							"include": "#function-signature-content"
						}
					]
				}
			}
		},
		"def-statement":{
			"match": "\\b(def|over)\\s(([\\s\\S][^\\)]*)\\))",
			"captures": {
				"1": {
					"name": "keyword.other.var.ymir"
				},
				"2":{
					"patterns": [
						{
							"include": "#function-signature"
						}
					]
				}
			}
		},
		"function-signature":{
			"match": "\\b([a-z0-9A-Z]+)\\s*\\(([\\s\\S]*)\\)",
			"captures": {
				"1": {
					"name": "entity.name.function.ymir"
				},
				"2":{
					"patterns": [
						{
							"include": "#function-signature-content"
						}
					]
				}
			}
		},
		"function-signature-content":{
			"match": "(([^,]*))(,([\\s\\S]*))*",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#function-field"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"include": "#function-signature-content"
						}
					]
				}
			}
		},
		"function-field":{
			"match": "([\\s\\S][^:]*):([\\s\\S]*)|((mut\\s+)?self)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#mutability-modifier"
						}
					],
					"name": "entity.name.variable.field.ymir"
				},
				"2": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"include": "#mutability-modifier"
						},
						{
							"include": "#self"
						}
					]
				}
			}
		},
		"literal": {
			"patterns": [
				{
					"include": "#null-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#strings"
				}
			]
		},
		"null-literal": {
			"name": "constant.language.null.ymir",
			"match": "(?<!\\.)\\bnull\\b"
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.cs",
					"match": "\\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.binary.cs",
					"match": "\\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.decimal.cs",
					"match": "\\b([0-9_]+)?\\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\\b"
				},
				{
					"name": "constant.numeric.decimal.cs",
					"match": "\\b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\\b"
				},
				{
					"name": "constant.numeric.decimal.cs",
					"match": "\\b[0-9_]+(F|f|D|d|M|m)\\b"
				},
				{
					"name": "constant.numeric.decimal.cs",
					"match": "\\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				}
			]
		},
		"type-left":{
			"match": "([a-zA-Z0-9:!()]+)(?=::)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#type-name"
						}
					]
				}
			}
		},
		"strings": {
			"name": "string.quoted.double.ymir",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ymir",
					"match": "\\\\."
				}
			]
		},		
		"type": {
			"name": "meta.type.ymir",
			"patterns": [				
				{
					"include": "#mutability-modifier"
				},
				{
					"include": "#type-builtin"
				},
				{
					"include": "#type-name"
				}
			]
		},
		"mutability-modifier": {
			"patterns": [				
				{
					"name": "keyword.other.var.ymir",
					"match": "\\b(mut|dmut)\\b"
				}
			]
		},
		"type-builtin": {
			"match": "\\b(i8|i16|i32|i64|u8|u16|u32|u64|isize|usize|f32|f64|s8|c8|bool)\\b",
			"captures": {
				"1": {
					"name": "entity.name.type.alias.ymir"
				}
			}
		},
		"type-name": {
			"patterns": [	
				{
					"match": "\\b([a-z0-9A-Z]+)(((\\:\\:)\\b([a-z0-9A-Z]*))*)",
					"captures": {
						"1": {
							"name": "entity.name.type.alias.ymir"
						},
						"2":{
							"patterns": [
								{
									"include": "#type-name"
								}
							]
						}
					}
				}			
			]
		},
		"template-name":{
            "match": "\\b([a-z0-9A-Z]+)(!)(.*?)\\)",
            "captures": {
                "1": {
                    "name": "entity.name.type.alias.ymir"
                },
                "2": {
                    "name": "punctuation.separator.coloncolon.ymir"
                },
                "3":{
                    "patterns": [
                        {
                            "include": "#type-name"
                        }
                    ]
                }
            }
        },
		"comment": {
			"patterns": [
				{
					"name": "comment.block.ymir",
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.ymir"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.ymir"
						}
					}
				},
				{
					"begin": "(^\\s+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.ymir"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"name": "comment.block.documentation.ymir",
							"begin": "(?<!/)///(?!/)",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.ymir"
								}
							},
							"end": "(?=$)"
						},
						{
							"name": "comment.line.double-slash.ymir",
							"begin": "(?<!/)//(?:(?!/)|(?=//))",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.ymir"
								}
							},
							"end": "(?=$)"
						}
					]
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.compound.cs",
					"match": "\\*=|/=|%=|\\+=|-="
				},
				{
					"name": "keyword.operator.assignment.compound.bitwise.cs",
					"match": "\\&=|\\^=|<<=|>>=|\\|="
				},
				{
					"name": "keyword.operator.bitwise.shift.cs",
					"match": "<<|>>"
				},
				{
					"name": "keyword.operator.comparison.cs",
					"match": "==|!="
				},
				{
					"name": "keyword.operator.relational.cs",
					"match": "<=|>=|<|>"
				},
				{
					"name": "keyword.operator.logical.cs",
					"match": "\\!|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.bitwise.cs",
					"match": "\\&|~|\\^|\\|"
				},
				{
					"name": "keyword.operator.assignment.cs",
					"match": "\\="
				},
				{
					"name": "keyword.operator.decrement.cs",
					"match": "--"
				},
				{
					"name": "keyword.operator.increment.cs",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.arithmetic.cs",
					"match": "%|\\*|/|-|\\+"
				},
				{
					"name": "keyword.operator.null-coalescing.cs",
					"match": "\\!is"
				}
			]
		},
		"struct-content":{
			"patterns": [
				{
					"match": "\\s*(\\|)([\\s\\S][^:]*):([\\s\\S]*)",
					"captures": {
						"1":{
							"name": "keyword.other.enum.cs"
						},
						"2": {
							"patterns": [
								{
									"include": "#mutability-modifier"
								}
							],
							"name": "entity.name.variable.field.ymir"
						},
						"3":{
							"patterns": [
								{
									"include": "#type"
								}
							]
						}
					}
				}
			]
		},
		"struct-name":{
			"patterns": [
				{
					"match": "\\s*(->)([\\s\\S]*)",
					"captures": {
						"1":{
							"patterns": [
								{
									"include": "#lambda"
								}
							]
						},
						"2":{
							"patterns": [
								{
									"include": "#type-name"
								}
							]
						}
					}
				}
			]
		},
		"enum-content":{
			"patterns": [
				{
					"match": "\\s*(\\|)([\\s\\S][^=]*)=([\\s\\S]*)",
					"captures": {
						"1":{
							"name": "keyword.other.enum.cs"
						},
						"2": {							
							"name": "entity.name.variable.field.ymir"
						},
						"3":{
							"patterns": [
								{
									"include": "#strings"
								},{
									"include": "#numeric-literal"
								}
							]
						}
					}
				}
			]
		},
		"impl-statement":{
			"match": "\\b(impl|trait)\\s+([a-z0-9A-Z:]+)",
			"captures": {
				"1": {
					"name": "keyword.other.var.ymir"
				},
				"2":{
					"patterns": [
						{
							"include": "#type-name"
						}
					]
				}
			}
		}
	},
	"scopeName": "source.yr"
}